#!/usr/bin/env ruby
#
# Time tracking
#
# Usage:
#   track init                        # initialize db
#   track auto                        # start tracking
#   track projects <since> <limit>    # list projects
#   track <project>[/<task>] [<time>] # add a project entry at a given time (defaults to now)
#   track untrack <id>                # remove project entry by id
#   track                             # show help and projects
#   track ls [<start> [<end>]]        # show report for period of time (defaults to todays)
#
# Example:
#   track ls                            # show log
#   track ls 2015-08 2015-09-28         # show log from 2015-08-01 until 2015-09-28
#   track "my project"                  # switch to "my project"
#   track "my project" 2015-09-28T11:13 # switch to "my project" on 2015-09-28 at 11:13
#   track projects 2015-10 20           # show last 20 projects since 2015-10-01
#   track untrack 3                     # remove project entry with id 3
#
##
#
# TODO:
#   track rename 3 "other project"      # rename project 3 to "other project"
#
##
# Copyright (c) Martin Sigloch <copyright@f0i.de>
# This file is part of github:f0i/bin
# As long as you retain this notice you can do whatever you want with it.
# This code and information are provided without warranty of any kind.
##

require 'sqlite3'

DBFILE = "#{Dir.home}/timetracking.db"

def db
  @db ||= SQLite3::Database.open DBFILE
end

def init
  db.execute "CREATE TABLE IF NOT EXISTS workspaces(id INTEGER PRIMARY KEY, name TEXT, start TEXT)"
  db.execute "CREATE TABLE IF NOT EXISTS projects(id INTEGER PRIMARY KEY, name TEXT, start TEXT)"
end

def track_workspace name=nil, time=nil
  time ||= Time.now
  pid = `pgrep -f "slock"`.split("\n").first.to_i
  name ||= "slock" if pid > 0
  name ||= `get-awesome-workspace`.strip
  db.execute "INSERT INTO workspaces(name, start) VALUES (?, ?)", [name, time_to_s(time)]
  puts name
end

def track_project name, time=nil
  time ||= Time.now
  db.execute "INSERT INTO projects(name, start) VALUES (?, ?)", [name, time_to_s(time)]
  puts "switch to project '#{name}' at #{time_to_s time}"
end

def dump
  out = ["workspaces:"]
  out += db.execute "SELECT start, name FROM workspaces"
  out << "projects:"
  out += db.execute "SELECT start, name FROM workspaces"
end

def by_day since=nil, endtime=nil
  since ||= Time.now.strftime "%Y-%m-%d"
  endtime ||= Time.now.strftime "%Y-%m-%d"
  db.execute "SELECT name, count(id) FROM workspaces WHERE SUBSTR(start, 1, #{since.length}) >= ? AND SUBSTR(start, 1, #{endtime.length}) <= ? group by name", since, endtime
end

def report since=nil, endtime=nil
  since ||= Time.now.strftime "%Y-%m-%d"
  endtime ||= Time.now.strftime "%Y-%m-%d"

  puts "Time #{since} - #{endtime}:"

  times = by_day(since, endtime)

  times = times.map do |x|
    space = 8 - x[0].length
    space = space > 0 ? (" " * space) : ""
    seconds = x[1] * 15
    out = seconds_to_hms(seconds).merge(workspace: "#{x[0]}#{space}")
    out
  end

  times = times.each do |x|
    print x[:workspace], " "
    puts hms_to_s x
  end
  print "no slock "
  puts hms_to_s seconds_to_hms times.map{|x| x[:workspace].strip == "slock" ? 0 : x[:seconds]}.reduce(:+)
end

def seconds_to_hms seconds
  hour = seconds / (60*60)
  second = seconds % (60*60)
  minute = second / 60
  second %= 60
  {seconds: seconds, second: second, minute: minute, hour: hour}
end

def hms_to_s x
  "%3d:%2d:%2d" % [x[:hour], x[:minute], x[:second]]
end

def untrack_project id
  db.execute "DELETE FROM projects WHERE id = ?", id
end

def projects since=nil, limit=nil
  since ||= Time.now.strftime "%Y-%m-%d"
  limit ||= 1000
  ps = db.execute "SELECT start, name, id FROM projects WHERE SUBSTR(start, 1, #{since.length}) >= ? ORDER BY start DESC LIMIT #{limit.to_i}", since
end

def list_projects since=nil, limit=nil
  projects(since, limit).each do |p|
    print p[2], ": ", p[0], ": ", p[1], "\n"
  end
end

def time_to_s time
  time.strftime '%Y-%m-%d %H:%M:%S'
end

def import file
  begin
    db.transaction
    File.read(file).split("\n").each do |line|
      time, name = line.split /: /
      puts time
      time = Time.parse time
      puts time
      track_workspace name, time
    end
    db.commit
  rescue SQLite3::Exception => e
    puts "Exception occurred"
    puts e
    db.rollback
  end
end

if ARGV.empty?
  File.read(__FILE__).split("\n").each do |line|
    break if line.strip == "" || line == "##"
    puts line.gsub /^# ?/, "" unless line.start_with? "#!"
  end
  puts "latest 20 projects:"
  ARGV[0] = "projects"
  ARGV[1] = ""
  ARGV[2] = 20
end

command = ARGV[0]
case command
when "init"
  init
when "dump"
  dump.each do |x|
    print x
    puts
  end
when "import"
  import ARGV[1]
when "ls"
  report ARGV[1], ARGV[2]
when /^project/
  list_projects ARGV[1], ARGV[2]
when "auto"
  loop do
    begin
      track_workspace
    rescue Exception => e
      puts "ERROR", e.message
      `notify-send "Could not track" "#{e.message.gsub(/[^a-zA-Z0-9 .,-]/, "")}"`
    end
    sleep 2 # to not log multiple times in one second
    delay = 15 - (Time.now.to_i % 15)
    sleep delay
  end
when "untrack"
  print "type YES to delete project ", ARGV[1], ": "
  if STDIN.readline.strip == "YES"
    untrack_project ARGV[1]
    puts "remaining projects:"
    list_projects "", 40
  else
    puts "canceled"
  end
else
  time = Time.parse ARGV[1] if ARGV[1]
  track_project ARGV[0], time
end

db.close

